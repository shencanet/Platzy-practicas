const getList = ([x, ...y]) => [x, y]
const getUser = user => { name: user.name, age: user.age }

const list = [1, 2, 3, 4]
const user = { name: "Lydia", age: 21 }

console.log(getList(list)) //游뱂?
console.log(getUser(user)) //游뱂?

/*Respuesta Correcta: A) [1, [2, 3, 4]] y SyntaxError

    En la funci칩n getList:

    Tenemos una desestructuraci칩n de arreglos en la lista de par치metros de la funci칩n y adem치s y es un par치metro de tipo REST. Por ende, al pasar el argumento list, x ser치 igual al primer elemento del arreglo, 칩sea, 1. y como es de tipo REST ser치 un arreglo con todos los elementos restantes de list, 칩sea, [2, 3, 4]. La funci칩n regresa un nuevo arreglo [x, y], entonces tendr칤amos un arreglo anidado y como resultado [1, [2, 3, 4]].
    En la funci칩n getUser:

    Recibe un 칰nico par치metro user que es un objeto y luego lo regresa. Las funciones de tipo flecha tiene la caracter칤stica denominada return impl칤cito con esto se logra escribir funciones m치s compactas y de una sola l칤nea, pero cuando intentamos usar un return impl칤cito para devolver un objeto es obligatorio usar par칠ntesis para envolver al objeto en cuesti칩n, sino hacemos esto el interprete nos arrojar치 un SyntaxError.



Para que el return impl칤cito tenga sentido tendr칤amos que usar par칠ntesis para envolver el objeto:

  const getUser = user => ({ name: user.name, age: user.age })

 const user = { name: "Lydia", age: 21 }

 console.log(getUser(user)); // {name: "Lydia", age: 21}  */